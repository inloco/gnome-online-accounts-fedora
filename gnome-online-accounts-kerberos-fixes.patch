From 6e96a9b8663d2e54aca71ccbdf88612a8e7e9de7 Mon Sep 17 00:00:00 2001
From: Debarshi Ray <debarshir@gnome.org>
Date: Tue, 7 Nov 2017 15:59:19 +0100
Subject: [PATCH 1/3] kerberos: Don't leak the GcrPrompt

---
 src/goabackend/goakerberosprovider.c | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/goabackend/goakerberosprovider.c b/src/goabackend/goakerberosprovider.c
index 79f19104930d..3fb197f0eaa4 100644
--- a/src/goabackend/goakerberosprovider.c
+++ b/src/goabackend/goakerberosprovider.c
@@ -956,7 +956,7 @@ on_system_prompt_open_for_initial_sign_in (GcrSystemPrompt     *system_prompt,
                                            GTask               *operation_result)
 {
   GCancellable *cancellable;
-  GcrPrompt    *prompt;
+  GcrPrompt    *prompt = NULL;
   GError       *error;
 
   cancellable = g_task_get_cancellable (operation_result);
@@ -967,8 +967,7 @@ on_system_prompt_open_for_initial_sign_in (GcrSystemPrompt     *system_prompt,
     {
       g_task_return_error (operation_result, error);
       g_object_unref (operation_result);
-
-      return;
+      goto out;
     }
 
   gcr_prompt_set_title (prompt, _("Log In to Realm"));
@@ -980,6 +979,9 @@ on_system_prompt_open_for_initial_sign_in (GcrSystemPrompt     *system_prompt,
                              (GAsyncReadyCallback)
                              on_system_prompt_answered_for_initial_sign_in,
                              operation_result);
+
+ out:
+  g_clear_object (&prompt);
 }
 
 static void
-- 
2.14.3


From 86d7f0c6629d6ab2f85cf79df25e02a5dc5e269a Mon Sep 17 00:00:00 2001
From: Debarshi Ray <debarshir@gnome.org>
Date: Fri, 3 Nov 2017 19:54:59 +0100
Subject: [PATCH 2/3] utils: Domain names may not have a dot; usernames
 shouldn't be empty

https://bugzilla.gnome.org/show_bug.cgi?id=789187
---
 src/goabackend/goautils.c | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/src/goabackend/goautils.c b/src/goabackend/goautils.c
index f384d0cbd177..3943c87ac115 100644
--- a/src/goabackend/goautils.c
+++ b/src/goabackend/goautils.c
@@ -833,17 +833,12 @@ gboolean
 goa_utils_parse_email_address (const gchar *email, gchar **out_username, gchar **out_domain)
 {
   gchar *at;
-  gchar *dot;
 
   if (email == NULL || email[0] == '\0')
     return FALSE;
 
   at = strchr (email, '@');
-  if (at == NULL || *(at + 1) == '\0')
-    return FALSE;
-
-  dot = strchr (at + 1, '.');
-  if (dot == NULL || *(dot + 1) == '\0')
+  if (at == NULL || at == email || *(at + 1) == '\0')
     return FALSE;
 
   if (out_username != NULL)
-- 
2.14.3


From ddc0ab48c31a6daaa6946d7f367c3a689ad4d895 Mon Sep 17 00:00:00 2001
From: Debarshi Ray <debarshir@gnome.org>
Date: Fri, 3 Nov 2017 20:25:17 +0100
Subject: [PATCH 3/3] kerberos: Re-write the account addition UI without realmd

So far, realmd was being merely used to auto-discover a list of realms,
and validate whether the user entered a valid realm or not before
prompting for credentials. This sounds nice in theory but, in
practice, it is far too fragile. For example, realmd gets frequently
tripped up by Fedora's Kerberos setup which uses _kerberos._tcp
instead of the more common _kerberos._udp SRV record. Secondly, the
realm validation isn't snappy and can take a while, so the user has to
wait a bit before she is able to enter her credentials.

The current UI is also odd because it presents separate fields for
entering the realm and the username. Most people are used to entering
username@realm or username@REALM because of their familiarity with
email addresses and kinit.

Therefore, the account addition UI has now been re-written without
realmd. There is only one field for the user to enter her principal,
and the realm is automatically capitalized if it isn't. It entirely
relies on libkrb5.so to validate the principal during the initial
sign-in once the credentials have been entered.

https://bugzilla.gnome.org/show_bug.cgi?id=789187
---
 src/goabackend/Makefile.am                 |   1 -
 src/goabackend/goakerberosprovider.c       | 440 +++----------------
 src/goaidentity/Makefile.am                |  19 -
 src/goaidentity/org.freedesktop.realmd.xml | 666 -----------------------------
 4 files changed, 62 insertions(+), 1064 deletions(-)
 delete mode 100644 src/goaidentity/org.freedesktop.realmd.xml

diff --git a/src/goabackend/Makefile.am b/src/goabackend/Makefile.am
index 7d6340a89fa5..0c65d8d07efa 100644
--- a/src/goabackend/Makefile.am
+++ b/src/goabackend/Makefile.am
@@ -102,7 +102,6 @@ libgoa_backend_1_0_la_SOURCES =						\
 	goawebview.h			goawebview.c			\
 	nautilus-floating-bar.h		nautilus-floating-bar.c		\
 	$(top_builddir)/src/goaidentity/org.gnome.Identity.c		\
-	$(top_builddir)/src/goaidentity/org.freedesktop.realmd.c	\
 	$(top_srcdir)/src/goaidentity/goaidentitymanagererror.c		\
 	$(NULL)
 
diff --git a/src/goabackend/goakerberosprovider.c b/src/goabackend/goakerberosprovider.c
index 3fb197f0eaa4..a04a9f205dfb 100644
--- a/src/goabackend/goakerberosprovider.c
+++ b/src/goabackend/goakerberosprovider.c
@@ -30,8 +30,6 @@
 
 #include "org.gnome.Identity.h"
 
-#include "org.freedesktop.realmd.h"
-
 struct _GoaKerberosProvider
 {
   GoaProvider parent_instance;
@@ -130,21 +128,11 @@ typedef struct
   GtkWidget *connect_button;
   GtkWidget *progress_grid;
 
-  GtkWidget *username;
-  GtkWidget *realm_entry;
-  GtkWidget *realm_combo_box;
-  GtkListStore *realm_store;
-
-  guint      interface_added_id;
-
-  gboolean realm_chosen;
+  GtkWidget *principal;
 
   gchar *account_object_path;
 
   GError *error;
-  GCancellable *cancellable;
-  GoaRealmProvider *realm_provider;
-  GDBusObjectManager *realm_manager;
 } SignInRequest;
 
 static void
@@ -156,67 +144,6 @@ translate_error (GError **error)
   g_dbus_error_strip_remote_error (*error);
 }
 
-static gboolean
-query_tooltip (GtkWidget  *widget,
-               gint        x,
-               gint        y,
-               gboolean    keyboard_mode,
-               GtkTooltip *tooltip,
-               gpointer    user_data)
-{
-  gchar *tip;
-
-  if (GTK_ENTRY_ICON_SECONDARY == gtk_entry_get_icon_at_pos (GTK_ENTRY (widget), x, y))
-    {
-      tip = gtk_entry_get_icon_tooltip_text (GTK_ENTRY (widget),
-                                             GTK_ENTRY_ICON_SECONDARY);
-      gtk_tooltip_set_text (tooltip, tip);
-      g_free (tip);
-      return TRUE;
-    }
-
-  return FALSE;
-}
-
-static void
-icon_released (GtkEntry             *entry,
-               GtkEntryIconPosition  pos,
-               GdkEvent             *event,
-               gpointer              user_data)
-{
-  GtkSettings *settings;
-  gint timeout;
-
-  settings = gtk_widget_get_settings (GTK_WIDGET (entry));
-
-  g_object_get (settings, "gtk-tooltip-timeout", &timeout, NULL);
-  g_object_set (settings, "gtk-tooltip-timeout", 1, NULL);
-  gtk_tooltip_trigger_tooltip_query (gtk_widget_get_display (GTK_WIDGET (entry)));
-  g_object_set (settings, "gtk-tooltip-timeout", timeout, NULL);
-}
-
-static void
-set_entry_validation_error (GtkEntry    *entry,
-                            GError      *error)
-{
-  translate_error (&error);
-  gtk_entry_set_icon_from_icon_name (entry, GTK_ENTRY_ICON_SECONDARY,
-                                     "dialog-error-symbolic");
-  gtk_entry_set_icon_activatable (entry, GTK_ENTRY_ICON_SECONDARY, TRUE);
-  g_signal_connect (entry, "icon-release", G_CALLBACK (icon_released), FALSE);
-  g_signal_connect (entry, "query-tooltip", G_CALLBACK (query_tooltip), NULL);
-  g_object_set (entry, "has-tooltip", TRUE, NULL);
-  gtk_entry_set_icon_tooltip_text (entry, GTK_ENTRY_ICON_SECONDARY,
-                                   error->message);
-}
-
-static void
-clear_entry_validation_error (GtkEntry *entry)
-{
-  g_object_set (entry, "has-tooltip", FALSE, NULL);
-  gtk_entry_set_icon_from_pixbuf (entry, GTK_ENTRY_ICON_SECONDARY, NULL);
-}
-
 static void
 sign_in_identity (GoaKerberosProvider  *self,
                   const char           *identifier,
@@ -537,151 +464,62 @@ add_entry (GtkWidget     *grid,
     *out_entry = entry;
 }
 
-static void
-add_combo_box (GtkWidget     *grid,
-               gint           row,
-               const gchar   *text,
-               const gchar   *placeholder,
-               GtkListStore  *model,
-               GtkWidget    **out_combo_box,
-               GtkWidget    **out_entry)
-{
-  GtkStyleContext *context;
-  GtkWidget *label;
-  GtkWidget *combo_box;
-  GtkWidget *entry;
-
-  label = gtk_label_new_with_mnemonic (text);
-  context = gtk_widget_get_style_context (label);
-  gtk_style_context_add_class (context, GTK_STYLE_CLASS_DIM_LABEL);
-  gtk_widget_set_halign (label, GTK_ALIGN_END);
-  gtk_widget_set_hexpand (label, TRUE);
-  gtk_grid_attach (GTK_GRID (grid), label, 0, row, 1, 1);
-
-  combo_box = gtk_combo_box_new_with_model_and_entry (GTK_TREE_MODEL (model));
-  gtk_widget_set_hexpand (combo_box, TRUE);
-  gtk_widget_show (combo_box);
-
-  entry = gtk_bin_get_child (GTK_BIN (combo_box));
-  gtk_entry_set_placeholder_text (GTK_ENTRY (entry), placeholder);
-
-  gtk_grid_attach (GTK_GRID (grid), combo_box, 1, row, 3, 1);
-
-  gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
-  if (out_combo_box != NULL)
-    *out_combo_box = combo_box;
-
-  if (out_entry != NULL)
-    *out_entry = entry;
-}
-
-static void
-on_realm_added (GDBusObjectManager       *manager,
-                GoaRealmObject           *object,
-                SignInRequest            *request)
+static gchar *
+normalize_principal (const gchar *principal, gchar **out_realm)
 {
-  GoaRealmKerberos *kerberos;
-  GoaRealmCommon *common;
-  GtkTreeIter iter;
-  const gchar *configured;
-
-  kerberos = goa_realm_object_peek_kerberos (object);
-  if (!kerberos)
-    return;
+  gchar *domain = NULL;
+  gchar *realm = NULL;
+  gchar *ret = NULL;
+  gchar *username = NULL;
 
+  if (!goa_utils_parse_email_address (principal, &username, &domain))
+    goto out;
 
-  gtk_list_store_append (request->realm_store, &iter);
-  gtk_list_store_set (request->realm_store,
-                      &iter,
-                      0, goa_realm_kerberos_get_domain_name (kerberos),
-                     -1);
+  realm = g_utf8_strup (domain, -1);
+  ret = g_strconcat (username, "@", realm, NULL);
 
-  if (!request->realm_chosen)
+  if (out_realm != NULL)
     {
-      common = goa_realm_object_peek_common (object);
-      g_return_if_fail (common != NULL);
-
-      configured = goa_realm_common_get_configured (common);
-      if (configured && !g_str_equal (configured, ""))
-        gtk_combo_box_set_active_iter (GTK_COMBO_BOX (request->realm_combo_box), &iter);
+      *out_realm = realm;
+      realm = NULL;
     }
+
+ out:
+  g_free (domain);
+  g_free (realm);
+  g_free (username);
+  return ret;
 }
 
 static void
-on_populate_provider_new (GObject *source,
-                          GAsyncResult *result,
-                          gpointer user_data)
+on_principal_changed (GtkEditable *editable, gpointer user_data)
 {
-  GoaRealmProvider *provider;
-  GError *error = NULL;
-  SignInRequest *request;
-  GVariant *options;
-
-  provider = goa_realm_provider_proxy_new_for_bus_finish (result, &error);
-  if (error != NULL)
-    {
-      g_warning ("Couldn't get realmd provider: %s", error->message);
-      g_error_free (error);
-      return;
-    }
-
-  /* We only know request is valid if no error */
-  request = user_data;
-  request->realm_provider = provider;
+  SignInRequest *request = user_data;
+  gboolean can_add;
+  const gchar *principal;
 
-  options = g_variant_new_array (G_VARIANT_TYPE ("{sv}"), NULL, 0);
-  goa_realm_provider_call_discover (provider, "", options, NULL, NULL, NULL);
+  principal = gtk_entry_get_text (GTK_ENTRY (request->principal));
+  can_add = goa_utils_parse_email_address (principal, NULL, NULL);
+  gtk_dialog_set_response_sensitive (request->dialog, GTK_RESPONSE_OK, can_add);
 }
 
 static void
-on_populate_manager_new (GObject *source,
-                         GAsyncResult *result,
-                         gpointer user_data)
+show_progress_ui (GtkContainer *container, gboolean progress)
 {
-  SignInRequest *request;
-  GDBusObjectManager *manager;
-  GError *error = NULL;
-  GList *objects, *l;
+  GList *children;
+  GList *l;
 
-  manager = goa_realm_object_manager_client_new_for_bus_finish (result, &error);
-  if (error != NULL)
+  children = gtk_container_get_children (container);
+  for (l = children; l != NULL; l = l->next)
     {
-      g_warning ("Couldn't get realmd object manager: %s", error->message);
-      g_error_free (error);
-      return;
-    }
-
-  /* We only know request is valid if no error */
-  request = user_data;
-  request->realm_manager = manager;
-
-  objects = g_dbus_object_manager_get_objects (manager);
-  for (l = objects; l != NULL; l = l->next)
-    on_realm_added (manager, l->data, request);
-  g_list_free_full (objects, g_object_unref);
+      GtkWidget *widget = GTK_WIDGET (l->data);
+      gdouble opacity;
 
-  request->interface_added_id = g_signal_connect (manager, "object-added",
-                                                  G_CALLBACK (on_realm_added), request);
-}
+      opacity = progress ? 1.0 : 0.0;
+      gtk_widget_set_opacity (widget, opacity);
+    }
 
-static void
-populate_realms_for_request (SignInRequest *request)
-{
-  goa_realm_provider_proxy_new_for_bus (G_BUS_TYPE_SYSTEM,
-                                        G_DBUS_PROXY_FLAGS_NONE,
-                                        "org.freedesktop.realmd",
-                                        "/org/freedesktop/realmd",
-                                        request->cancellable,
-                                        on_populate_provider_new,
-                                        request);
-
-  goa_realm_object_manager_client_new_for_bus (G_BUS_TYPE_SYSTEM,
-                                               G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,
-                                               "org.freedesktop.realmd",
-                                               "/org/freedesktop/realmd",
-                                               request->cancellable,
-                                               on_populate_manager_new,
-                                               request);
+  g_list_free (children);
 }
 
 static void
@@ -724,42 +562,29 @@ create_account_details_ui (GoaKerberosProvider *self,
   gtk_container_add (GTK_CONTAINER (grid0), grid1);
 
   row = 0;
+  add_entry (grid1, row++, _("_Principal"), &request->principal);
 
-  request->realm_store = gtk_list_store_new (1, G_TYPE_STRING);
-  add_combo_box (grid1,
-                 row++,
-                 _("_Domain"),
-                 _("Enterprise domain or realm name"),
-                 request->realm_store,
-                 &request->realm_combo_box,
-                 &request->realm_entry);
-  g_signal_connect (request->realm_entry, "changed", G_CALLBACK (clear_entry_validation_error), NULL);
-  gtk_combo_box_set_entry_text_column (GTK_COMBO_BOX (request->realm_combo_box), 0);
-
-  add_entry (grid1, row++, _("User_name"), &request->username);
-
-  populate_realms_for_request (request);
-  gtk_widget_grab_focus (request->realm_combo_box);
+  gtk_widget_grab_focus (request->principal);
+  g_signal_connect (request->principal, "changed", G_CALLBACK (on_principal_changed), request);
 
   gtk_dialog_add_button (request->dialog, _("_Cancel"), GTK_RESPONSE_CANCEL);
   request->connect_button = gtk_dialog_add_button (request->dialog, _("C_onnect"), GTK_RESPONSE_OK);
   gtk_dialog_set_default_response (request->dialog, GTK_RESPONSE_OK);
-  gtk_dialog_set_response_sensitive (request->dialog, GTK_RESPONSE_OK, TRUE);
+  gtk_dialog_set_response_sensitive (request->dialog, GTK_RESPONSE_OK, FALSE);
 
   request->progress_grid = gtk_grid_new ();
-  gtk_widget_set_no_show_all (request->progress_grid, TRUE);
   gtk_orientable_set_orientation (GTK_ORIENTABLE (request->progress_grid), GTK_ORIENTATION_HORIZONTAL);
   gtk_grid_set_column_spacing (GTK_GRID (request->progress_grid), 3);
   gtk_container_add (GTK_CONTAINER (grid0), request->progress_grid);
 
   spinner = gtk_spinner_new ();
+  gtk_widget_set_opacity (spinner, 0.0);
   gtk_widget_set_size_request (spinner, 20, 20);
-  gtk_widget_show (spinner);
   gtk_spinner_start (GTK_SPINNER (spinner));
   gtk_container_add (GTK_CONTAINER (request->progress_grid), spinner);
 
   label = gtk_label_new (_("Connecting…"));
-  gtk_widget_show (label);
+  gtk_widget_set_opacity (label, 0.0);
   gtk_container_add (GTK_CONTAINER (request->progress_grid), label);
 
   gtk_window_get_size (GTK_WINDOW (request->dialog), &width, NULL);
@@ -780,7 +605,8 @@ add_account_cb (GoaManager   *manager,
     translate_error (&request->error);
   g_main_loop_quit (request->loop);
   gtk_widget_set_sensitive (request->connect_button, TRUE);
-  gtk_widget_hide (request->progress_grid);
+  gtk_widget_set_sensitive (request->principal, TRUE);
+  show_progress_ui (GTK_CONTAINER (request->progress_grid), FALSE);
 }
 
 static void
@@ -1013,110 +839,6 @@ perform_initial_sign_in (GoaKerberosProvider *self,
   g_object_unref (cancellable);
 }
 
-static char *
-get_realm (SignInRequest *request)
-{
-  char *realm;
-  GtkTreeIter iter;
-
-  if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (request->realm_combo_box), &iter))
-    gtk_tree_model_get (gtk_combo_box_get_model (GTK_COMBO_BOX (request->realm_combo_box)),
-                        &iter,
-                        0, &realm,
-                        -1);
-  else
-    realm = g_strdup (gtk_entry_get_text (GTK_ENTRY (request->realm_entry)));
-
-  return realm;
-}
-
-static void
-release_realmd (GDBusProxy *proxy)
-{
-  GoaRealmService *service;
-  gchar *unique_name;
-  GError *error = NULL;
-
-  /*
-   * Since we are running from a long running process and don't want
-   * realmd to have to hang around for the entire user session, let
-   * realmd go away, by calling Release().
-   */
-
-  unique_name = g_dbus_proxy_get_name_owner (proxy);
-  if (!unique_name)
-    return;
-
-  /* This won't block because we're not loading properties, and using a unique name */
-  service = goa_realm_service_proxy_new_sync (g_dbus_proxy_get_connection (proxy),
-                                              G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES,
-                                              unique_name, "/org/freedesktop/realmd",
-                                              NULL, &error);
-  g_free (unique_name);
-
-  if (service == NULL)
-    {
-      g_warning ("Failed to create service proxy: %s", error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      goa_realm_service_call_release (service, NULL, NULL, NULL);
-      g_object_unref (service);
-    }
-}
-
-static void
-on_discover_realm (GObject *source,
-                   GAsyncResult *result,
-                   gpointer user_data)
-{
-  SignInRequest *request = user_data;
-  GError *error = NULL;
-  gchar **realm_paths = NULL;
-  GDBusObject *object = NULL;
-  GoaRealmKerberos *kerberos = NULL;
-  gint unused;
-
-  goa_realm_provider_call_discover_finish (request->realm_provider, &unused,
-                                           &realm_paths, result, &error);
-
-  if (error == NULL && realm_paths)
-    {
-      if (realm_paths[0])
-        object = g_dbus_object_manager_get_object (request->realm_manager,
-                                                   realm_paths[0]);
-      if (object)
-        {
-          kerberos = goa_realm_object_get_kerberos (GOA_REALM_OBJECT (object));
-          g_object_unref (object);
-        }
-      g_strfreev (realm_paths);
-    }
-
-  g_clear_error (&request->error);
-
-  if (kerberos)
-    {
-      gtk_entry_set_text (GTK_ENTRY (request->realm_entry),
-                          goa_realm_kerberos_get_realm_name (kerberos));
-      g_object_unref (kerberos);
-    }
-  else if (error)
-    {
-      request->error = error;
-    }
-  else
-    {
-      g_set_error (&request->error, G_IO_ERROR, G_IO_ERROR_FAILED,
-                   _("The domain is not valid"));
-    }
-
-  g_main_loop_quit (request->loop);
-  gtk_widget_set_sensitive (request->connect_button, TRUE);
-  gtk_widget_hide (request->progress_grid);
-}
-
 static GoaObject *
 add_account (GoaProvider    *provider,
              GoaClient      *client,
@@ -1130,15 +852,13 @@ add_account (GoaProvider    *provider,
   GVariantBuilder details;
   GoaObject   *object = NULL;
   GoaAccount  *account;
-  char        *realm;
-  const char  *username;
+  char        *realm = NULL;
+  const char *principal_text;
   const char *provider_type;
   gchar      *principal = NULL;
   gint        response;
-  GVariant   *options;
 
   memset (&request, 0, sizeof (SignInRequest));
-  request.cancellable = g_cancellable_new ();
   request.loop = g_main_loop_new (NULL, FALSE);
   request.dialog = dialog;
   request.error = NULL;
@@ -1158,37 +878,9 @@ start_over:
       goto out;
     }
 
-  realm = get_realm (&request);
-
-  /* Would have been set by dialog above, otherwise no realmd */
-  if (request.realm_provider && request.realm_manager)
-    {
-      options = g_variant_new_array (G_VARIANT_TYPE ("{sv}"), NULL, 0);
-      goa_realm_provider_call_discover (request.realm_provider, realm, options,
-                                        request.cancellable, on_discover_realm,
-                                        &request);
-      g_free (realm);
-
-      gtk_widget_set_sensitive (request.connect_button, FALSE);
-      gtk_widget_show (request.progress_grid);
-      g_main_loop_run (request.loop);
-
-      if (request.error)
-        {
-          set_entry_validation_error (GTK_ENTRY (request.realm_entry), request.error);
-          g_clear_error (&request.error);
-          goto start_over;
-        }
-
-      /* The realm was updated by on_discover_realm */
-      clear_entry_validation_error (GTK_ENTRY (request.realm_entry));
-      realm = get_realm (&request);
-    }
-
-  username = gtk_entry_get_text (GTK_ENTRY (request.username));
-
-  g_free (principal);
-  principal = g_strdup_printf ("%s@%s", username, realm);
+  principal_text = gtk_entry_get_text (GTK_ENTRY (request.principal));
+  principal = normalize_principal (principal_text, &realm);
+  gtk_entry_set_text (GTK_ENTRY (request.principal), principal);
 
   /* See if there's already an account of this type with the
    * given identity
@@ -1212,8 +904,6 @@ start_over:
   g_variant_builder_add (&details, "{ss}", "IsTemporary", "true");
   g_variant_builder_add (&details, "{ss}", "TicketingEnabled", "true");
 
-  g_free (realm);
-
   goa_manager_call_add_account (goa_client_get_manager (client),
                                 goa_provider_get_provider_type (provider),
                                 principal,
@@ -1224,7 +914,8 @@ start_over:
                                 (GAsyncReadyCallback) add_account_cb,
                                 &request);
   gtk_widget_set_sensitive (request.connect_button, FALSE);
-  gtk_widget_show (request.progress_grid);
+  gtk_widget_set_sensitive (request.principal, FALSE);
+  show_progress_ui (GTK_CONTAINER (request.progress_grid), TRUE);
   g_main_loop_run (request.loop);
   if (request.error != NULL)
     goto out;
@@ -1238,12 +929,14 @@ start_over:
   perform_initial_sign_in (self, object, principal, &request);
 
   gtk_widget_set_sensitive (request.connect_button, FALSE);
-  gtk_widget_show (request.progress_grid);
+  gtk_widget_set_sensitive (request.principal, FALSE);
+  show_progress_ui (GTK_CONTAINER (request.progress_grid), TRUE);
 
   g_main_loop_run (request.loop);
 
   gtk_widget_set_sensitive (request.connect_button, TRUE);
-  gtk_widget_hide (request.progress_grid);
+  gtk_widget_set_sensitive (request.principal, TRUE);
+  show_progress_ui (GTK_CONTAINER (request.progress_grid), FALSE);
 
   if (request.error != NULL)
     {
@@ -1275,7 +968,11 @@ start_over:
                                remove_account_cb,
                                request.loop);
       g_main_loop_run (request.loop);
+
       g_clear_object (&object);
+      g_clear_pointer (&principal, g_free);
+      g_clear_pointer (&realm, g_free);
+      g_clear_pointer (&request.account_object_path, g_free);
       goto start_over;
     }
 
@@ -1295,22 +992,9 @@ start_over:
   else
     g_assert (object != NULL);
 
-  if (request.interface_added_id != 0)
-    g_signal_handler_disconnect (G_OBJECT (request.realm_manager), request.interface_added_id);
-
-  g_cancellable_cancel (request.cancellable);
-  g_object_unref (request.cancellable);
-
-  g_clear_object (&request.realm_manager);
-
-  if (request.realm_provider)
-    {
-      release_realmd (G_DBUS_PROXY (request.realm_provider));
-      g_object_unref (request.realm_provider);
-    }
-
   g_free (request.account_object_path);
   g_free (principal);
+  g_free (realm);
   g_clear_pointer (&request.loop, (GDestroyNotify) g_main_loop_unref);
   return object;
 }
diff --git a/src/goaidentity/Makefile.am b/src/goaidentity/Makefile.am
index 0187b2ed28ee..9cb9d9a67d15 100644
--- a/src/goaidentity/Makefile.am
+++ b/src/goaidentity/Makefile.am
@@ -79,31 +79,12 @@ goaidentityenumtypes.c: goaidentityenumtypes.c.in $(identity_headers)
 EXTRA_DIST += goaidentityenumtypes.c.in
 BUILT_SOURCES += goaidentityenumtypes.c
 
-realmd_dbus_built_sources =					\
-	org.freedesktop.realmd.h				\
-	org.freedesktop.realmd.c				\
-	$(NULL)
-
-$(realmd_dbus_built_sources) : Makefile.am org.freedesktop.realmd.xml
-	$(AM_V_GEN) gdbus-codegen						\
-		--interface-prefix org.freedesktop.realmd.	\
-		--generate-c-code org.freedesktop.realmd	\
-		--c-generate-object-manager			\
-		--c-namespace GoaRealm				\
-		--annotate "org.freedesktop.realmd.Realm"	\
-		            org.gtk.GDBus.C.Name Common		\
-		$(srcdir)/org.freedesktop.realmd.xml		\
-		$(NULL)
-BUILT_SOURCES += $(realmd_dbus_built_sources)
-EXTRA_DIST += org.freedesktop.realmd.xml
-
 if BUILD_KERBEROS
 libexec_PROGRAMS = goa-identity-service
 
 goa_identity_service_SOURCES = 					\
 	goaidentityenumtypes.h		goaidentityenumtypes.c	\
 	$(identity_dbus_built_sources)				\
-	$(realmd_dbus_built_sources)				\
 	$(identity_sources)					\
 	$(NULL)
 
diff --git a/src/goaidentity/org.freedesktop.realmd.xml b/src/goaidentity/org.freedesktop.realmd.xml
deleted file mode 100644
index 557de5c8305d..000000000000
--- a/src/goaidentity/org.freedesktop.realmd.xml
+++ /dev/null
@@ -1,666 +0,0 @@
-<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
- "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
-<node name="/">
-
-	<!--
-	  org.freedesktop.realmd.Provider:
-	  @short_description: a realm provider
-
-	  Various realm providers represent different software implementations
-	  that provide access to realms or domains.
-
-	  This interface is implemented by individual providers, but is
-	  aggregated globally at the system bus name
-	  <literal>org.freedesktop.realmd</literal>
-	  with the object path <literal>/org/freedesktop/realmd</literal>
-	-->
-	<interface name="org.freedesktop.realmd.Provider">
-
-		<!--
-		  Name: the name of the provider
-
-		  The name of the provider. This is not normally displayed
-		  to the user, but may be useful for diagnostics or debugging.
-		-->
-		<property name="Name" type="s" access="read"/>
-
-		<!--
-		  Version: the version of the provider
-
-		  The version of the provider. This is not normally used in
-		  logic, but may be useful for diagnostics or debugging.
-		-->
-		<property name="Version" type="s" access="read"/>
-
-		<!--
-		  Realms: a list of realms
-
-		  A list of known, enrolled or discovered realms. All realms
-		  that this provider knows about are listed here. As realms
-		  are discovered they are added to this list.
-
-		  Each realm is represented by the DBus object path of the
-		  realm object.
-		-->
-		<property name="Realms" type="ao" access="read"/>
-
-		<!--
-		  Discover:
-		  @string: an input string to discover realms for
-		  @options: options for the discovery operation
-		  @relevance: the relevance of the returned results
-		  @realm: a list of realms discovered
-
-		  Discover realms for the given string. The input @string is
-		  usually a domain or realm name, perhaps typed by a user. If
-		  an empty string is provided the realm provider should try to
-		  discover a default realm if possible (eg: from DHCP).
-
-		  @options can contain, but is not limited to, the following values:
-		  <itemizedlist>
-		    <listitem><para><literal>operation</literal>: a string
-		      identifier chosen by the client, which can then later be
-		      passed to org.freedesktop.realmd.Service.Cancel() in order
-		      to cancel the operation</para></listitem>
-		  </itemizedlist>
-
-		  The @relevance returned can be used to rank results from
-		  different discover calls to different providers. Implementors
-		  should return a positive number if the provider highly
-		  recommends that the realms be handled by this provider,
-		  or a zero if it can possibly handle the realms. Negative
-		  should be returned if no realms are found.
-
-		  This method does not return an error when no realms are
-		  discovered. It simply returns an @realm list.
-
-		  To see diagnostic information about the discovery process
-		  connect to the org.freedesktop.realmd.Service::Diagnostics
-		  signal.
-
-		  This method requires authorization for the PolicyKit action
-		  called <literal>org.freedesktop.realmd.discover-realm</literal>.
-
-		  In addition to common DBus error results, this method may
-		  return:
-		  <itemizedlist>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Failed</literal>:
-		      may be returned if the discovery could not be run for some reason.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Cancelled</literal>:
-		      returned if the operation was cancelled.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotAuthorized</literal>:
-		      returned if the calling client is not permitted to perform a discovery
-		      operation.</para></listitem>
-		  </itemizedlist>
-		-->
-		<method name="Discover">
-			<arg name="string" type="s" direction="in"/>
-			<arg name="options" type="a{sv}" direction="in"/>
-			<arg name="relevance" type="i" direction="out"/>
-			<arg name="realm" type="ao" direction="out"/>
-		</method>
-
-	</interface>
-
-	<!--
-	  org.freedesktop.realmd.Service:
-	  @short_description: the realmd service
-
-	  Global calls for managing the realmd service. Usually you'll want
-	  to use #org.freedesktop.realmd.Provider instead.
-
-	  This interface is implemented by the realmd service, and is always
-	  available at the object path <literal>/org/freedesktop/realmd</literal>
-
-	  The service also implements the
-	  <literal>org.freedesktop.DBus.ObjectManager</literal> interface which
-	  makes it easy to retrieve all realmd objects and properties in one go.
-	-->
-	<interface name="org.freedesktop.realmd.Service">
-
-		<!--
-		  Cancel:
-		  @operation: the operation to cancel
-
-		  Cancel a realmd operation. To be able to cancel an operation
-		  pass a uniquely chosen <literal>operation</literal> string
-		  identifier as an option in the methods <literal>options</literal>
-		  argument.
-
-		  These operation string identifiers should be unique per client
-		  calling the realmd service.
-
-		  It is not guaranteed that the service can or will cancel the
-		  operation. For example the operation may have already completed
-		  by the time this method is handled. The caller of the operation
-		  method will receive a
-		  <literal>org.freedesktop.realmd.Error.Cancelled</literal>
-		  if the operation was cancelled.
-		-->
-		<method name="Cancel">
-			<arg name="operation" type="s" direction="in"/>
-		</method>
-
-		<!--
-		  SetLocale:
-		  @locale: the locale for the client
-
-		  Set the language @locale for the client. This locale is used
-		  for error messages. The locale is used until the next time
-		  this method is called, the client disconnects, or the client
-		  calls #org.freedesktop.realmd.Service.Release().
-		-->
-		<method name="SetLocale">
-			<arg name="locale" type="s" direction="in"/>
-		</method>
-
-		<!--
-		  Diagnostics:
-		  @data: diagnostic data
-		  @operation: the operation this data resulted from
-
-		  This signal is fired when diagnostics result from an operation
-		  in the provider or one of its realms.
-
-		  It is not guaranteed that this signal is emitted once per line.
-		  More than one line may be contained in @data, or a partial
-		  line. New line characters are embedded in @data.
-
-		  This signal is sent explicitly to the client which invoked
-		  operation method. In order to tell which operation this
-		  diagnostic data results from, pass a unique
-		  <literal>operation</literal> string identifier in the
-		  <literal>options</literal> argument of the operation method.
-		  That same identifier will be passed back via the @operation
-		  argument of this signal.
-		-->
-		<signal name="Diagnostics">
-			<arg name="data" type="s"/>
-			<arg name="operation" type="s"/>
-		</signal>
-
-		<!--
-		  Release:
-
-		  Normally realmd waits until all clients have disconnected
-		  before exiting itself, sometime later. For long lived clients
-		  they can call this method to allow the realmd service to quit.
-		  This is an optimization. The daemon will not exit immediately.
-		  It is safe to call this multiple times.
-		-->
-		<method name="Release">
-			<!-- no arguments -->
-		</method>
-
-	</interface>
-
-	<!--
-	  org.freedesktop.realmd.Realm:
-	  @short_description: a realm
-
-	  Represents one realm.
-
-	  Contains generic information about a realm, and useful properties for
-	  introspecting what kind of realm this is and how to work with
-	  the realm.
-
-	  Use #org.freedesktop.realmd.Provider:Realms or
-	  #org.freedesktop.realmd.Provider.Discover() to get access to some
-	  kerberos realm objects.
-
-	  Realms will always implement additional interfaces, such as
-	  #org.freedesktop.realmd.Kerberos.  Do not assume that all realms
-	  implement that kerberos interface. Use the
-	  #org.freedesktop.realmd.Realm:SupportedInterfaces property to see
-	  which interfaces are set.
-
-	  Different realms support various ways to configure them on the
-	  system. Use the #org.freedesktop.realmd.Realm:Configured property
-	  to determine if a realm is configured. If it is configured the
-	  property will be set to the interface of the mechanism that was
-	  used to configure it.
-
-	  To configure a realm, look in the
-	  #org.freedesktop.realmd.Realm:SupportedInterfaces property for a
-	  recognized purpose specific interface that can be used for
-	  configuration, such as the
-	  #org.freedesktop.realmd.KerberosMembership interface and its
-	  #org.freedesktop.realmd.KerberosMembership.Join() method.
-
-	  To deconfigure a realm from the current system, you can use the
-	  #org.freedesktop.realmd.Realm.Deconfigure() method. In additon some
-	  of the configuration specific interfaces provide methods to
-	  deconfigure a realm in a specific way, such as
-	  #org.freedesktop.realmd.KerberosMembership.Leave() method.
-
-	  The various properties are guaranteed to have been updated before
-	  the operation methods return, if they change state.
-	-->
-	<interface name="org.freedesktop.realmd.Realm">
-
-		<!--
-		  Name: the realm name
-
-		  This is the name of the realm, appropriate for display to
-		  end users where necessary.
-		-->
-		<property name="Name" type="s" access="read"/>
-
-		<!--
-		  Configured: whether this domain is configured and how
-
-		  If this property is an empty string, then the realm is not
-		  configured. Otherwise the realm is configured, and contains
-		  a string which is the interface that represents how it was
-		  configured, for example #org.freedesktop.realmd.KerberosMembership.
-		-->
-		<property name="Configured" type="s" access="read"/>
-
-		<!--
-		  Deconfigure: deconfigure this realm
-
-		  Deconfigure this realm from the local machine with standard
-		  default behavior.
-
-		  The behavior of this method depends on the which configuration
-		  interface is present in the
-		  #org.freedesktop.realmd.Realm.Configured property. It does not
-		  always delete membership accounts in the realm, but just
-		  reconfigures the local machine so it no longer is configured
-		  for the given realm. In some cases the implementation may try
-		  to update membership accounts, but this is not guaranteed.
-
-		  Various configuration interfaces may support more specific ways
-		  to deconfigure a realm in a specific way, such as the
-		  #org.freedesktop.realmd.KerberosMembership.Leave() method.
-
-		  @options can contain, but is not limited to, the following values:
-		  <itemizedlist>
-		    <listitem><para><literal>operation</literal>: a string
-		      identifier chosen by the client, which can then later be
-		      passed to org.freedesktop.realmd.Service.Cancel() in order
-		      to cancel the operation</para></listitem>
-		  </itemizedlist>
-
-		  This method requires authorization for the PolicyKit action
-		  called <literal>org.freedesktop.realmd.deconfigure-realm</literal>.
-
-		  In addition to common DBus error results, this method may return:
-		  <itemizedlist>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Failed</literal>:
-		      may be returned if the deconfigure failed for a generic reason.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Cancelled</literal>:
-		      returned if the operation was cancelled.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotAuthorized</literal>:
-		      returned if the calling client is not permitted to deconfigure a
-		      realm.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotConfigured</literal>:
-		      returned if this realm is not configured on the machine.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Busy</literal>:
-		      returned if the service is currently performing another operation like
-		      join or leave.</para></listitem>
-		  </itemizedlist>
-		-->
-		<method name="Deconfigure">
-			<arg name="options" type="a{sv}" direction="in"/>
-		</method>
-
-		<!--
-		  SupportedInterfaces:
-
-		  Additional supported interfaces of this realm. This includes
-		  interfaces that contain more information about the realm,
-		  such as #org.freedesktop.realmd.Kerberos and interfaces
-		  which contain methods for configuring a realm, such as
-		  #org.freedesktop.realmd.KerberosMembership.
-		-->
-		<property name="SupportedInterfaces" type="as" access="read"/>
-
-		<!--
-		  Details: informational details about the realm
-
-		  Informational details about the realm. The following values
-		  should be present:
-		  <itemizedlist>
-		    <listitem><para><literal>server-software</literal>:
-		      identifier of the software running on the server (eg:
-		      <literal>active-directory</literal>).</para></listitem>
-		    <listitem><para><literal>client-software</literal>:
-		      identifier of the software running on the client (eg:
-		      <literal>sssd</literal>).</para></listitem>
-		  </itemizedlist>
-		-->
-		<property name="Details" type="a(ss)" access="read"/>
-
-		<!--
-		  LoginFormats: supported formats for login names
-
-		  Supported formats for login to this realm. This is only
-		  relevant once the realm has been enrolled. The formats
-		  will contain a <literal>%U</literal> in the string, which
-		  indicate where the user name should be placed. The formats
-		  may contain a <literal>%D</literal> in the string which
-		  indicate where a domain name should be placed.
-
-		  The first format in the list is the preferred format for
-		  login names.
-		-->
-		<property name="LoginFormats" type="as" access="read"/>
-
-		<!--
-		  LoginPolicy: the policy for logins using this realm
-
-		  The policy for logging into this computer using this realm.
-
-		  The policy can be changed using the
-		  #org.freedesktop.realmd.Realm.ChangeLoginPolicy() method.
-
-		  The following policies are predefined. Not all providers
-		  support all these policies and there may be provider specific
-		  policies or multiple policies represented in the string:
-		  <itemizedlist>
-		    <listitem><para><literal>allow-any-login</literal>: allow
-		      login by any authenticated user present in this
-		      realm.</para></listitem>
-		    <listitem><para><literal>allow-permitted-logins</literal>:
-		      only allow the logins permitted in the
-		      #org.freedesktop.realmd.Realm:PermittedLogins
-		      property.</para></listitem>
-		    <listitem><para><literal>deny-any-login</literal>:
-		      don't allow any logins via authenticated users of this
-		      realm.</para></listitem>
-		  </itemizedlist>
-		-->
-		<property name="LoginPolicy" type="s" access="read"/>
-
-		<!--
-		  PermittedLogins: the permitted login names
-
-		  The list of permitted authenticated users allowed to login
-		  into this computer. This is only relevant if the
-		  #org.freedesktop.realmd.Realm:LoginPolicy property
-		  contains the <literal>allow-permitted-logins</literal>
-		  string.
-		-->
-		<property name="PermittedLogins" type="as" access="read"/>
-
-		<!--
-		  ChangeLoginPolicy:
-		  @login_policy: the new login policy, or an empty string
-		  @permitted_add: a list of logins to permit
-		  @permitted_remove: a list of logins to not permit
-		  @options: options for this operation
-
-		  Change the login policy and/or permitted logins for this realm.
-
-		  Not all realms support the all the various login policies. An
-		  error will be returned if the new login policy is not supported.
-		  You may specify an empty string for the @login_policy argument
-		  which will cause no change in the policy itself. If the policy
-		  is changed, it will be reflected in the
-		  #org.freedesktop.realmd.Realm:LoginPolicy property.
-
-		  The @permitted_add and @permitted_remove arguments represent
-		  lists of login names that should be added and removed from
-		  the #org.freedesktop.realmd.Kerberos:PermittedLogins property.
-
-		  @options can contain, but is not limited to, the following values:
-		  <itemizedlist>
-		    <listitem><para><literal>operation</literal>: a string
-		      identifier chosen by the client, which can then later be
-		      passed to org.freedesktop.realmd.Service.Cancel() in order
-		      to cancel the operation</para></listitem>
-		  </itemizedlist>
-
-		  This method requires authorization for the PolicyKit action
-		  called <literal>org.freedesktop.realmd.login-policy</literal>.
-
-		  In addition to common DBus error results, this method may return:
-		  <itemizedlist>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Failed</literal>:
-		      may be returned if the policy change failed for a generic reason.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Cancelled</literal>:
-		      returned if the operation was cancelled.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotAuthorized</literal>:
-		      returned if the calling client is not permitted to change login policy
-		      operation.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotConfigured</literal>:
-		      returned if the realm is not configured.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Busy</literal>:
-		      returned if the service is currently performing another operation like
-		      join or leave.</para></listitem>
-		  </itemizedlist>
-		-->
-		<method name="ChangeLoginPolicy">
-			<arg name="login_policy" type="s" direction="in"/>
-			<arg name="permitted_add" type="as" direction="in"/>
-			<arg name="permitted_remove" type="as" direction="in"/>
-			<arg name="options" type="a{sv}" direction="in"/>
-		</method>
-
-	</interface>
-
-	<!--
-	  org.freedesktop.realmd.Kerberos:
-	  @short_description: a kerberos realm
-
-	  An interface that describes a kerberos realm in more detail. This
-	  is always implemented on an DBus object path that also implements
-	  the #org.freedesktop.realmd.Realm interface.
-	-->
-	<interface name="org.freedesktop.realmd.Kerberos">
-
-		<!--
-		  RealmName: the kerberos realm name
-
-		  The kerberos name for this realm. This is usually in upper
-		  case.
-		-->
-		<property name="RealmName" type="s" access="read"/>
-
-		<!--
-		  DomainName: the DNS domain name
-
-		  The DNS domain name for this realm.
-		-->
-		<property name="DomainName" type="s" access="read"/>
-
-	</interface>
-
-	<!--
-	  org.freedesktop.realmd.KerberosMembership:
-
-	  An interface used to configure this machine by joining a realm.
-
-	  It sets up a computer/host account in the realm for this machine
-	  and a keytab to track the credentials for that account.
-
-	  The various properties are guaranteed to have been updated before
-	  the operation methods return, if they change state.
-	-->
-	<interface name="org.freedesktop.realmd.KerberosMembership">
-
-		<!--
-		  SuggestedAdministrator: common administrator name
-
-		  The common administrator name for this type of realm. This
-		  can be used by clients as a hint when prompting the user for
-		  administrative authentication.
-		-->
-		<property name="SuggestedAdministrator" type="s" access="read"/>
-
-		<!--
-		  SupportedJoinCredentials: credentials supported for joining
-
-		  Various kinds of credentials that are supported when calling the
-		  #org.freedesktop.realmd.Kerberos.Join() method.
-
-		  Each credential is represented by a type, and an owner. The type
-		  denotes which kind of credential is passed to the method. The
-		  owner indicates to the client how to prompt the user or obtain
-		  the credential, and to the service how to use the credential.
-
-		  The various types are:
-		  <itemizedlist>
-		    <listitem><para><literal>ccache</literal>:
-		      the credentials should contain an array of bytes as a
-		      <literal>ay</literal> containing the data from a kerberos
-		      credential cache file.</para></listitem>
-		    <listitem><para><literal>password</literal>:
-		      the credentials should contain a pair of strings as a
-		      <literal>(ss)</literal> representing a name and
-		      password. The name may contain a realm in the standard
-		      kerberos format. If missing, it will default to this
-		      realm. The name may be empty for a computer or one time
-		      password.</para></listitem>
-		    <listitem><para><literal>automatic</literal>:
-		      the credentials should contain an empty string as a
-		      <literal>s</literal>. Using <literal>automatic</literal>
-		      indicates that default or system credentials are to be
-		      used.</para></listitem>
-		  </itemizedlist>
-
-		  The various owners are:
-		  <itemizedlist>
-		    <listitem><para><literal>administrator</literal>:
-		      the credentials belong to a kerberos user principal.
-		      The caller may use this as a hint to prompt the user
-		      for administrative credentials.</para></listitem>
-		    <listitem><para><literal>user</literal>:
-		      the credentials belong to a kerberos user principal.
-		      The caller may use this as a hint to prompt the user
-		      for his (possibly non-administrative)
-		      credentials.</para></listitem>
-		    <listitem><para><literal>computer</literal>:
-		      the credentials belong to the computer realmd is
-		      being run on.</para></listitem>
-		    <listitem><para><literal>secret</literal>:
-		      the credentials are a one time password or other secret
-		      used to join or leave the computer.</para></listitem>
-		  </itemizedlist>
-		-->
-		<property name="SupportedJoinCredentials" type="a(ss)" access="read"/>
-
-		<!--
-		  SupportedLeaveCredentials: credentials supported for leaving
-
-		  Various kinds of credentials that are supported when calling the
-		  #org.freedesktop.realmd.Kerberos.Leave() method.
-
-		  See #org.freedesktop.realmd.Kerberos:SupportedJoinCredentials for
-		  a discussion of what the values represent.
-		-->
-		<property name="SupportedLeaveCredentials" type="a(ss)" access="read"/>
-
-		<!--
-		  Join:
-
-		  Join this machine to the realm and enroll the machine.
-
-		  If this method returns successfully then the machine will be
-		  joined to the realm. It is not necessary to restart services or the
-		  machine afterward. Relevant properties on the realm will be updated
-		  before the method returns.
-
-		  The @credentials should be set according to one of the
-		  supported credentials returned by
-		  #org.freedesktop.realmd.Kerberos:SupportedJoinCredentials.
-		  The first string in the tuple is the type, the second string
-		  is the owner, and the variant contains the credential contents
-		  See the discussion at
-		  #org.freedesktop.realmd.Kerberos:SupportedJoinCredentials
-		  for more information.
-
-		  @options can contain, but is not limited to, the following values:
-		  <itemizedlist>
-		    <listitem><para><literal>operation</literal>: a string
-		      identifier chosen by the client, which can then later be
-		      passed to org.freedesktop.realmd.Service.Cancel() in order
-		      to cancel the operation</para></listitem>
-		  </itemizedlist>
-
-		  This method requires authorization for the PolicyKit action
-		  called <literal>org.freedesktop.realmd.configure-realm</literal>.
-
-		  In addition to common DBus error results, this method may return:
-		  <itemizedlist>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Failed</literal>:
-		      may be returned if the join failed for a generic reason.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Cancelled</literal>:
-		      returned if the operation was cancelled.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotAuthorized</literal>:
-		      returned if the calling client is not permitted to perform an join
-		      operation.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.AuthenticationFailed</literal>:
-		      returned if the credentials passed did not authenticate against the realm
-		      correctly. It is appropriate to prompt the user again.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.AlreadyEnrolled</literal>:
-		      returned if already enrolled in this realm, or another realm and enrolling
-		      in multiple realms is not supported.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Busy</literal>:
-		      returned if the service is currently performing another operation like
-		      join or leave.</para></listitem>
-		  </itemizedlist>
-		-->
-		<method name="Join">
-			<arg name="credentials" type="(ssv)" direction="in"/>
-			<arg name="options" type="a{sv}" direction="in"/>
-		</method>
-
-		<!--
-		  Leave:
-
-		  Leave the realm and unenroll the machine.
-
-		  If this method returns successfully then the machine will have
-		  left the domain and been unenrolled. It is not necessary to restart
-		  services or the machine afterward. Relevant properties on the realm
-		  will be updated before the method returns.
-
-		  The @credentials should be set according to one of the
-		  supported credentials returned by
-		  #org.freedesktop.realmd.Kerberos:SupportedUnenrollCredentials.
-		  The first string in the tuple is the type, the second string
-		  is the owner, and the variant contains the credential contents
-		  See the discussion at
-		  #org.freedesktop.realmd.Kerberos:SupportedEnrollCredentials
-		  for more information.
-
-		  @options can contain, but is not limited to, the following values:
-		  <itemizedlist>
-		    <listitem><para><literal>operation</literal>: a string
-		      identifier chosen by the client, which can then later be
-		      passed to org.freedesktop.realmd.Service.Cancel() in order
-		      to cancel the operation</para></listitem>
-		  </itemizedlist>
-
-		  This method requires authorization for the PolicyKit action
-		  called <literal>org.freedesktop.realmd.deconfigure-realm</literal>.
-
-		  In addition to common DBus error results, this method may return:
-		  <itemizedlist>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Failed</literal>:
-		      may be returned if the unenroll failed for a generic reason.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Cancelled</literal>:
-		      returned if the operation was cancelled.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotAuthorized</literal>:
-		      returned if the calling client is not permitted to perform an unenroll
-		      operation.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.AuthenticationFailed</literal>:
-		      returned if the credentials passed did not authenticate against the realm
-		      correctly. It is appropriate to prompt the user again.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.NotEnrolled</literal>:
-		      returned if not enrolled in this realm.</para></listitem>
-		    <listitem><para><literal>org.freedesktop.realmd.Error.Busy</literal>:
-		      returned if the service is currently performing another operation like
-		      enroll or unenroll.</para></listitem>
-		  </itemizedlist>
-		-->
-		<method name="Leave">
-			<arg name="credentials" type="(ssv)" direction="in"/>
-			<arg name="options" type="a{sv}" direction="in"/>
-		</method>
-
-	</interface>
-
-</node>
-- 
2.14.3

